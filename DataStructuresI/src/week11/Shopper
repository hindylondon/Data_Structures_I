package week11;

import java.util.HashMap;
import java.util.Scanner;

public class Shopper implements Comparable<Shopper> {
	//fields
	private static int nextId = 1;
	private int id;
	private String name;
	private int itemsPurchased;
	private double totalPurchase;
	private int coupon;

	//constructor
	public Shopper(String name, int itemsPurchased, double totalPurchase) {
		this.id = nextId++;
		this.name = name;
		this.itemsPurchased = itemsPurchased;
		this.totalPurchase = totalPurchase;
		this.coupon = 15;
	}

	//getters and setters
	public int getId() {
		return id;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getItemsPurchased() {
		return itemsPurchased;
	}

	public void setItemsPurchased(int itemsPurchased) {
		this.itemsPurchased = itemsPurchased;
	}

	public double getTotalPurchase() {
		return totalPurchase;
	}

	public void setTotalPurchase(double totalPurchase) {
		this.totalPurchase = totalPurchase;
	}
	
	//equals method to be used for testing
    public boolean equals(Shopper obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        Shopper shopper = (Shopper) obj;
        return Double.compare(shopper.totalPurchase, totalPurchase) == 0 &&
               itemsPurchased == shopper.itemsPurchased &&
               name == shopper.name;
    }

	//main shopping method: sets up the store products, calls for its display, 
	//displays shoppers cart totals and enqueues to the checkout
	public void goShopping(MyPriorityQueue<Shopper> pq, Shopper[] customers) {
		Scanner input = new Scanner(System.in);
		//instantiate all the stores products
		Products product = new Products("", 0);
		Products[] products = { new Products("Fruit", 1.49), new Products("Vegetable", 1.29),
				new Products("Bread", 2.99), new Products("Snack", 3.65), new Products("Milk", 2.19),
				new Products("Eggs", 1.68), new Products("Dessert", 10.27) };

		//sets up products in a hashmap for easy retreival
		HashMap<Integer, Products> hash = new HashMap<>();

		for (int i = 0; i < products.length; i++) {
			hash.put(i + 1, products[i]);
		}

		//goes though each shopper and calls for their input into their cart
		for (int i = 0; i < customers.length; i++) {
			System.out.println(customers[i].getName() + ", enjoy shopping!");
			System.out.println();
			
			//calcs cartTotal by calling the fillCart method
			double cartTotal = customers[i].fillCart(hash, products, product, input);
			
			//outputs to user their info
			System.out.println("Ok, you have " + customers[i].getItemsPurchased() + " items in your cart.");
			customers[i].setTotalPurchase(cartTotal);
			System.out.println("Your cart total comes to $" + cartTotal + ".");
			System.out.println();
			
			//checks if shopper gets coupon and outputs that
			if (getCoupon(cartTotal)) {
				customers[i].setTotalPurchase(cartTotal -= coupon);
				System.out.println("We appreciate your support! We would like to show our appreciation "
						+ "by gifting you with a $" + coupon + " coupon! Enjoy!");
				System.out.println("Your new cart total comes to $" + cartTotal);
			}
			
			//enqueue the customers to the priority queue
			pq.enqueue(customers[i]);
		}

	}

	//fills each customers cart based on their inputted amounts
	public double fillCart(HashMap<Integer, Products> hash, Products[] products, Products product, Scanner input) {
		// display the products for the shopper
		product.displayProducts(products);
		double cartTotal = 0;
		System.out.println("Which items would you like to purchase?");
		String moreItems = "y";
		
		// ensure that the user gets to add as many products as desired
		while ("y".equals(moreItems)) {
			// get the key for the desired product
			System.out.println("Enter the product ID for your item: ");
			int addedProduct = input.nextInt();
			
			//input val for ID
			while (addedProduct < 1 && addedProduct > hash.size() + 1) {
				System.out.println("Invalid Entry.");
				System.out.println("Enter the product ID for your item: ");
				addedProduct = input.nextInt();
			}
			
			// get the quantity of product
			System.out.println("How many of this item do you want? ");
			int quantity = input.nextInt();
			
			//input val for quantity
			while (quantity < 1) {
				System.out.println("Invalid Entry.");
				System.out.println("How many of this item do you want? ");
				quantity = input.nextInt();
			}
			
			// add new items to the cart total and cartNum
			setItemsPurchased(quantity += getItemsPurchased());
			cartTotal += hash.get(addedProduct).getPrice() * quantity;
			
			// keep adding new items until shopper is done
			System.out.println("Do you want another item? (y/n)");
			String userInput = input.next().toLowerCase();
			
			//input val for repeating
			while (!userInput.equals("y") && !userInput.equals("n")) {
				System.out.println("Invalid Entry.");
				System.out.println("Do you want another item? (y/n)");
				userInput = input.next().toLowerCase();
			}
			moreItems = userInput;
			System.out.println();
		}
		//returns total amount of purchase
		return cartTotal;
		
	}

	//calculates if customer spent enough money to earn a coupon
	public boolean getCoupon(double cartTotal) {
		boolean earnCoupon = false;
		
		//if they spent more then $50, they get a coupon
		if (cartTotal > 50) {
			earnCoupon = true;
		}
		return earnCoupon;
	}

	//the compareTo for the PriorityQueue
	//the customer who spent the most, gets checked out first
	@Override
	public int compareTo(Shopper o) {
		if (totalPurchase < o.totalPurchase) {
			return -1;

		} else if (totalPurchase > o.totalPurchase) {
			return 1;

		} else {
			return Integer.compare(id, o.id);
		}
	}
	


	//goes thru the checkout process, based on the priority queue
	//outputs nicely to the user
	public void checkout(MyPriorityQueue<Shopper> pq) {
		while (!pq.isEmpty()) {
			System.out.println("We are checking out...");
			System.out.println(pq.dequeue().getName() + ", you are all checked out.");
			System.out.println("Thank you for shopping with us!");
			System.out.println();
		}
	}

}
